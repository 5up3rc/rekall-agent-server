[{"plugin": "AFF4Acquire", "name": "aff4acquire", "description": "Copy the physical address space to an AFF4 file.\n\n\nNOTE: This plugin does not require a working profile - unless the user also\nwants to copy the pagefile or mapped files. In that case we must analyze the\nlive memory to gather the required files.", "args": {"destination": {"type": "String", "help": "The destination file to create. ", "positional": true}, "destination_url": {"type": "String", "help": "The destination AFF4 URL to create. "}, "compression": {"type": "String", "default": "snappy", "choices": ["snappy", "stored", "zlib"], "help": "The compression to use."}, "append": {"type": "Boolean", "default": false, "help": "Append to the current volume."}, "also_memory": {"type": "Boolean", "default": "auto", "help": "Also acquire physical memory. If not specified we acquire physical memory only when no other operation is specified."}, "also_mapped_files": {"type": "Boolean", "help": "Also get mapped or opened files (requires a profile)"}, "also_pagefile": {"type": "Boolean", "help": "Also get the pagefile/swap partition (requires a profile)"}, "files": {"type": "ArrayStringParser", "help": "Also acquire files matching the following globs."}, "max_file_size": {"type": "IntParser", "default": 104857600, "help": "Maximum file size to acquire."}, "gce_credentials": {"type": "String", "help": "The GCE service account credentials to use."}, "gce_credentials_path": {"type": "String", "help": "A path to the GCE service account credentials to use."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "AFF4Dump", "name": "aff4dump", "description": "Dump the entire resolver contents for an AFF4 volume.\n", "args": {"long": {"type": "Boolean", "help": "Include additional information about each stream."}, "regex": {"type": "RegEx", "default": ".", "help": "Regex of filenames to dump."}, "volume": {"type": "String", "help": "Volume to list.", "positional": true, "required": true}, "gce_credentials": {"type": "String", "help": "The GCE service account credentials to use."}, "gce_credentials_path": {"type": "String", "help": "A path to the GCE service account credentials to use."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "AFF4Export", "name": "aff4export", "description": "Exports all the streams in an AFF4 Volume.\n", "args": {"regex": {"type": "RegEx", "default": ".", "help": "Regex of filenames to dump."}, "volume": {"type": "String", "help": "Volume to list.", "positional": true, "required": true}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "gce_credentials": {"type": "String", "help": "The GCE service account credentials to use."}, "gce_credentials_path": {"type": "String", "help": "A path to the GCE service account credentials to use."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "AFF4Ls", "name": "aff4ls", "description": "List the content of an AFF4 file.\n", "args": {"long": {"type": "Boolean", "help": "Include additional information about each stream."}, "regex": {"type": "RegEx", "default": ".", "help": "Regex of filenames to dump."}, "volume": {"type": "String", "help": "Volume to list.", "positional": true, "required": true}, "gce_credentials": {"type": "String", "help": "The GCE service account credentials to use."}, "gce_credentials_path": {"type": "String", "help": "A path to the GCE service account credentials to use."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "APIGenerator", "name": "api", "description": "Generate the plugin API document.\n", "args": {"output_file": {"type": "String", "help": "If specified we write the API into this file in YAML."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "APIPslist", "name": "pslist", "description": "A live pslist plugin using the APIs.\n", "args": {"pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_live_api"]}, {"plugin": "APISetProcessContext", "name": "cc", "description": "A cc plugin for setting process context to live mode.\n", "args": {"pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_live_api"]}, {"plugin": "AgentControllerExplainFlows", "name": "explain_flow", "description": "Explain all the parameters a flow may take.\n", "args": {"flow": {"type": "Choices", "choices": ["CollectFlow", "ListProcessesFlow", "FileFinderFlow", "YaraScan", "ListDirectory", "Artifact", "Hunt"], "help": "The flow to explain", "positional": true, "required": true}, "verbosity": {"type": "IntParser", "default": 0, "help": "If non zero show all fields."}, "recursive": {"type": "Bool", "help": "Show recursively nested fields."}, "client_id": {"type": "String", "help": "The client_id. If not specified we use the context as set by the cc() plugin."}}, "active_modes": ["mode_agent", "mode_controller"]}, {"plugin": "AgentControllerExportCollections", "name": "export", "description": "Exports all collections from the hunt or flow.\n", "args": {"flow_id": {"type": "String", "help": "The flow or hunt ID we should export.", "positional": true, "required": true}, "dumpdir": {"type": "String", "help": "The output directory we use export to.", "positional": true, "required": true}, "client_id": {"type": "String", "help": "The client_id. If not specified we use the context as set by the cc() plugin."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_agent", "mode_controller"]}, {"plugin": "AgentControllerFetch", "name": "fetch", "description": "\n", "args": {"path": {"type": "String", "help": "The path to fetch.", "positional": true, "required": true}, "client_id": {"type": "String", "help": "The client_id. If not specified we use the context as set by the cc() plugin."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_agent", "mode_controller"]}, {"plugin": "AgentControllerRunFlow", "name": "launch_flow", "description": "\n", "args": {"flow": {"type": "Choices", "choices": ["CollectFlow", "ListProcessesFlow", "FileFinderFlow", "YaraScan", "ListDirectory", "Artifact", "Hunt"], "help": "The flow to launch", "positional": true, "required": true}, "args": {"type": "Any", "default": {}, "help": "Arguments to the flow (use explain_flow to see valid args).This may also be a JSON encoded string", "positional": true}, "queue": {"type": "String", "help": "Which queue to schedule the hunt on."}, "condition": {"type": "String", "help": "An EFilter query to evaluate if the flow should be run."}, "canned_condition": {"type": "Choices", "choices": {"OS_LINUX": "any from agent_info() where key=='system' and value=='Linux'", "OS_OSX": "any from agent_info() where key=='system' and value=='Darwin'", "OS_WINDOWS": "any from agent_info() where key=='system' and value=='Windows'"}, "help": "Canned conditions for the hunt."}, "live": {"type": "Choices", "default": "API", "choices": ["API", "Memory"], "help": "Live mode to use"}, "quota": {"type": "IntParser", "default": 3600, "help": "Total number of CPU seconds allowed for this flow."}, "verbosity": {"type": "IntParser", "default": 0, "help": "If non zero show all fields."}, "client_id": {"type": "String", "help": "The client_id. If not specified we use the context as set by the cc() plugin."}}, "active_modes": ["mode_agent", "mode_controller"]}, {"plugin": "AgentControllerRunHunt", "name": "launch_hunt", "description": "Launch a hunt on many clients at once.\n\nRekall does not treat hunts as different or special entities - a hunt is\njust a flow which targets multiple systems. However, for users it is\nsometimes helpful to think in terms of a \"hunt\". This plugin makes it easier\nto launch the hunt.", "args": {"queue": {"type": "String", "default": "All", "help": "Which queue to schedule the hunt on."}, "flow": {"type": "Choices", "choices": ["CollectFlow", "ListProcessesFlow", "FileFinderFlow", "YaraScan", "ListDirectory", "Artifact", "Hunt"], "help": "The flow to launch", "positional": true, "required": true}, "args": {"type": "Any", "default": {}, "help": "Arguments to the flow (use explain_flow to see valid args).This may also be a JSON encoded string", "positional": true}, "condition": {"type": "String", "help": "An EFilter query to evaluate if the flow should be run."}, "canned_condition": {"type": "Choices", "choices": {"OS_LINUX": "any from agent_info() where key=='system' and value=='Linux'", "OS_OSX": "any from agent_info() where key=='system' and value=='Darwin'", "OS_WINDOWS": "any from agent_info() where key=='system' and value=='Windows'"}, "help": "Canned conditions for the hunt."}, "live": {"type": "Choices", "default": "API", "choices": ["API", "Memory"], "help": "Live mode to use"}, "quota": {"type": "IntParser", "default": 3600, "help": "Total number of CPU seconds allowed for this flow."}, "verbosity": {"type": "IntParser", "default": 0, "help": "If non zero show all fields."}, "client_id": {"type": "String", "help": "The client_id. If not specified we use the context as set by the cc() plugin."}}, "active_modes": ["mode_agent", "mode_controller"]}, {"plugin": "AgentControllerShowFile", "name": "view", "description": "Display information about a file.\n", "args": {"path": {"type": "String", "help": "A path to the object to display.", "positional": true, "required": true}, "query": {"type": "String", "help": "If this is a collection, issue this query"}, "limit": {"type": "String", "help": "Limit result to this many rows."}, "mode": {"type": "Choices", "choices": ["text", "hex"], "help": "Mode for dumping files"}, "encoding": {"type": "String", "default": "ascii", "help": "Possible encodings we try for text mode detection."}, "offset": {"type": "IntParser", "default": 0, "help": "An offset to hexdump."}, "client_id": {"type": "String", "help": "The client_id. If not specified we use the context as set by the cc() plugin."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_agent", "mode_controller"]}, {"plugin": "AgentControllerShowFlows", "name": "show_flows", "description": "\n", "args": {"limit": {"type": "IntParser", "default": 20, "help": "Total results to display"}, "client_id": {"type": "String", "help": "The client_id. If not specified we use the context as set by the cc() plugin."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_agent", "mode_controller"]}, {"plugin": "AgentControllerShowHunts", "name": "show_hunts", "description": "\n", "args": {"queue": {"type": "String", "default": "All", "help": "The hunt queue."}, "limit": {"type": "IntParser", "default": 20, "help": "Total results to display"}, "client_id": {"type": "String", "help": "The client_id. If not specified we use the context as set by the cc() plugin."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_agent", "mode_controller"]}, {"plugin": "AgentControllerStoreLs", "name": "bucket_ls", "description": "Show files within the storage bucket.\n", "args": {"path": {"type": "String", "help": "A path to the object to display.", "positional": true}, "limit": {"type": "IntParser", "default": 100, "help": "Total results to display"}, "client_id": {"type": "String", "help": "The client_id. If not specified we use the context as set by the cc() plugin."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_agent", "mode_controller"]}, {"plugin": "AgentInfo", "name": "agent_info", "description": "Just emit information about the agent.\n\nThe output format is essentially key value pairs. This is useful for efilter\nqueries.", "args": {"verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_agent"]}, {"plugin": "AgentServerInitializeGCS", "name": "agent_server_initialize_gcs", "description": "Initialize the agent server to work in Google Cloud Storage.\n", "args": {"bucket": {"type": "String", "help": "The bucket name for the GCS deployment.", "required": true}, "service_account_path": {"type": "String", "help": "Path to the service account (JSON) credentials", "required": true}, "config_dir": {"type": "String", "help": "The directory to write configuration files into.", "positional": true, "required": true}, "client_writeback_path": {"type": "String", "default": "/etc/rekall/agent.local.json", "help": "Path to the local client writeback location"}, "labels": {"type": "Array", "default": ["All"], "help": "The list of labels."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "AgentServerInitializeLocalHTTP", "name": "agent_server_initialize_http", "description": "Initialize the agent server to work in Google Cloud Storage.\n", "args": {"base_url": {"type": "String", "help": "The publicly accessible URL of the frontend."}, "bind_port": {"type": "IntParser", "default": 8000, "help": "Port to bind to"}, "bind_address": {"type": "String", "default": "127.0.0.1", "help": "Address to bind to"}, "config_dir": {"type": "String", "help": "The directory to write configuration files into.", "positional": true, "required": true}, "client_writeback_path": {"type": "String", "default": "/etc/rekall/agent.local.json", "help": "Path to the local client writeback location"}, "labels": {"type": "Array", "default": ["All"], "help": "The list of labels."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "AgentWorker", "name": "worker", "description": "\n", "args": {"batches": {"type": "ChoiceArray", "default": ["Startup", "FlowStatus", "HuntStatus"], "choices": ["Startup", "FlowStatus", "HuntStatus"], "help": "One or more batch jobs to run."}, "loop": {"type": "IntParser", "default": 0, "help": "If specified we loop forever and sleep that many seconds between loops."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_agent"]}, {"plugin": "AnalyzeStruct", "name": "analyze_struct", "description": "A plugin to analyze a memory location.\n", "args": {"offset": {"type": "SymbolAddress", "help": "A virtual address to analyze.", "positional": true, "required": true}, "search": {"type": "IntParser", "default": 256, "help": "How far back to search for pool tag."}, "size": {"type": "IntParser", "default": 256, "help": "How many elements to identify."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Arp", "name": "arp", "description": "print the ARP table.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "ArtifactsCollector", "name": "artifact_collector", "description": "Collects artifacts.\n", "args": {"artifacts": {"type": "ArrayStringParser", "help": "A list of artifact names to collect.", "positional": true, "required": true}, "artifact_files": {"type": "ArrayStringParser", "help": "A list of additional yaml files to load which contain artifact definitions."}, "definitions": {"type": "ArrayStringParser", "help": "An inline artifact definition in yaml format."}, "create_timeline": {"type": "Bool", "default": false, "help": "Also generate a timeline file."}, "copy_files": {"type": "Bool", "default": false, "help": "Copy files into the output."}, "writer": {"type": "Choices", "choices": ["Zip", "Directory"], "help": "Writer for artifact results."}, "output_path": {"type": "String", "help": "Path suitable for dumping files."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "ArtifactsList", "name": "artifact_list", "description": "List details about all known artifacts.\n", "args": {"regex": {"type": "RegEx", "default": ".", "help": "Filter the artifact name."}, "supported_os": {"type": "ArrayStringParser", "help": "If specified show for these OSs, otherwise autodetect based on the current image."}, "labels": {"type": "ArrayStringParser", "help": "Filter by these labels."}, "all": {"type": "Bool", "help": "Show all artifacts."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "ArtifactsView", "name": "artifact_view", "description": "\n", "args": {"artifacts": {"type": "ArrayStringParser", "help": "A list of artifacts to display", "positional": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "AtomScan", "name": "atomscan", "description": "Pool scanner for _RTL_ATOM_TABLE\n", "args": {"sort_by": {"type": "String", "default": "offset", "choices": ["atom", "refcount", "offset"], "help": "Sort by [offset | atom | refcount]"}, "scan_kernel_paged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel paged pool."}, "scan_kernel_nonpaged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel non-paged pool."}, "scan_kernel_code": {"type": "Boolean", "default": false, "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_session_pools": {"type": "Boolean", "default": false, "help": "Scan session pools for all processes."}, "limit": {"type": "IntParser", "default": 18446744073709551616, "help": "The length of data to search in each selected region."}, "scan_physical": {"type": "Boolean", "default": false, "help": "Scan the physical address space only."}, "scan_kernel": {"type": "Boolean", "default": false, "help": "Scan the entire kernel address space."}, "scan_process_memory": {"type": "Boolean", "default": false, "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Atoms", "name": "atoms", "description": "Print session and window station atom tables.\n\nFrom:\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/ms649053.aspx\n\nAn atom table is a system-defined table that stores strings and\ncorresponding identifiers. An application places a string in an atom table\nand receives a 16-bit integer, called an atom, that can be used to access\nthe string. A string that has been placed in an atom table is called an atom\nname.\n\nThe global atom table is available to all applications. When an application\nplaces a string in the global atom table, the system generates an atom that\nis unique throughout the system. Any application that has the atom can\nobtain the string it identifies by querying the global atom table.\n\n(The global atom tables are only global within each session).", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Banner", "name": "banner", "description": "Prints the Linux banner information.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "BashHistory", "name": "bash", "description": "Scan the bash process for history.\n\nBased on original algorithm by Andrew Case.", "args": {"scan_entire_address_space": {"type": "Boolean", "help": "Scan the entire process address space, not only the heap."}, "proc_regex": {"type": "RegEx", "default": "^bash$", "help": "The processes we should examine."}, "pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "method": {"type": "ChoiceArray", "default": ["InitTask"], "choices": ["InitTask"], "help": "Method to list processes (Default uses all methods)."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "BuildIndex", "name": "build_index", "description": "Generate a profile index file based on an index specification.\n\nThe index specification is currently a yaml file with the following\nstructure:\n\n```\nbase_symbol: (string) # OPTIONAL Compute ALL offsets as relative to this\n    symbol. This includes MaxOffset and MinOffset.\nsymbols: (array of dicts) # A list of symbols to index.\n  -\n    name: (string) # Symbol name\n    data: (string) # Data that should be at the symbol's offset\n    shift: (int) # OPTIONAL Adjust symbol offset by this number\n```\n\n## Example:\n\n```\npath: win32k.sys\nsymbols:\n  -\n    # The name of the symbol we test for.\n    name: \"??_C@_1BO@KLKIFHLC@?$AAG?$AAU?$AAI?$AAF?$AAo?$AAn?$AAt?$AA?4?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$AA@\"\n\n    # The data we expect to find at that offset.\n    data: \"47005500490046006f006e0074002e00480065006900670068007400\"\n\n  -\n    name: \"wcschr\"\n    shift: -1\n    data: \"90\"\n```\n\nThe result is an index profile. This has an $INDEX section which is a dict,\nwith keys being the profile name, and values being a list of (offset, match)\ntuples. For example:\n\n```\n{\n \"$INDEX\": {\n  \"tcpip.sys/AMD64/6.0.6001.18000/0C1A1EC1D61E4508A33F5212FC1B37202\": [[1184600,\n\"495053656344656c657465496e626f756e644f7574626f756e64536150616972\"]],\n  \"tcpip.sys/AMD64/6.0.6001.18493/29A4DBCAF840463298F40190DD1492D02\": [[1190376,\n\"495053656344656c657465496e626f756e644f7574626f756e64536150616972\"]],\n  \"tcpip.sys/AMD64/6.0.6002.18272/7E79532FC7E349C690F5FBD16E3562172\": [[1194296,\n\"495053656344656c657465496e626f756e644f7574626f756e64536150616972\"]], ...\n\n \"$METADATA\": {\n  \"ProfileClass\": \"Index\",\n  \"Type\": \"Profile\"\n  \"MaxOffset\": 546567\n  \"MinOffset\": 0\n  }\n }\n```", "active_modes": []}, {"plugin": "BuildProfileLocally", "name": "build_local_profile", "description": "Download and builds a profile locally in one step.\n\nWe store the profile in the first repository in the profile_path which must\nbe writable. Usually this is a caching repository so the profile goes in the\nlocal cache.", "active_modes": []}, {"plugin": "CallbackScan", "name": "callback_scan", "description": "Print system-wide notification routines by scanning for them.\n\nNote this plugin is quite inefficient - consider using the callbacks plugin\ninstead.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Callbacks", "name": "callbacks", "description": "Enumerate callback routines.\n\nThis plugin just enumerates installed callback routines from various\nsources. It does not scan for them.\n\nThis plugin is loosely based on the original Volatility plugin of the same\nname but much expanded using new information.\n\nReference:\n<http://www.codemachine.com/notes.html>", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "CertDump", "name": "simple_certdump", "description": "Dump certs found by cert scan.\n", "args": {"dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "CertScan", "name": "simple_certscan", "description": "Dump RSA private and public SSL keys from the physical address space.\n", "args": {"verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "CertYaraScan", "name": "certscan", "description": "Scan certificates in windows memory regions.\n", "args": {"yara_file": {"type": "String", "help": "", "hidden": true}, "yara_expression": {"type": "String", "default": "\nrule x509 {\n  strings: $a = {30 82 ?? ?? 30 82 ?? ??} condition: $a\n}\nrule pkcs {\n  strings: $a = {30 82 ?? ?? 02 01 00} condition: $a\n}\n", "help": "", "hidden": true}, "hits": {"type": "IntParser", "default": 1000000, "help": "Total number of hits to report."}, "string": {"type": "String", "help": "A verbatim string to search for."}, "binary_string": {"type": "String", "help": "A binary string (encoded as hex) to search for. e.g. 000102[1-200]0506"}, "context": {"type": "IntParser", "default": 64, "help": "Context to print after the hit."}, "pre_context": {"type": "IntParser", "default": 0, "help": "Context to print before the hit."}, "scan_kernel_paged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel paged pool."}, "scan_kernel_nonpaged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel non-paged pool."}, "scan_kernel_code": {"type": "Boolean", "default": false, "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_session_pools": {"type": "Boolean", "default": false, "help": "Scan session pools for all processes."}, "limit": {"type": "IntParser", "default": 18446744073709551616, "help": "The length of data to search in each selected region."}, "scan_physical": {"type": "Boolean", "default": false, "help": "Scan the physical address space only."}, "scan_kernel": {"type": "Boolean", "default": false, "help": "Scan the entire kernel address space."}, "scan_process_memory": {"type": "Boolean", "default": false, "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "CheckAFInfo", "name": "check_afinfo", "description": "Verifies the operation function pointers of network protocols.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "CheckCreds", "name": "check_creds", "description": "Checks if any processes are sharing credential structures\n", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "method": {"type": "ChoiceArray", "default": ["InitTask"], "choices": ["InitTask"], "help": "Method to list processes (Default uses all methods)."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "CheckIdt", "name": "check_idt", "description": "Checks if the IDT has been altered\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "CheckModules", "name": "check_modules", "description": "Compares module list to sysfs info, if available.\n\nSysfs contains a kset objects for a number of kernel objects (kobjects). One\nof the ksets is the \"module_kset\" which holds references to all loaded\nkernel modules.\n\nEach struct module object holds within it a kobj struct for reference\ncounting. This object is referenced both from the struct module and the\nsysfs kset.\n\nThis plugin traverses the kset and resolves the kobj back to its containing\nobject (which is the struct module itself). We then compare the struct\nmodule with the list of known modules (which is obtained by traversing the\nmodule's list member). So if a module were to simply unlink itself from the\nlist, it would still be found by its reference from sysfs.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "CheckPEHooks", "name": "check_pehooks", "description": "Checks a pe file mapped into memory for hooks.\n", "args": {"image_base": {"type": "SymbolAddress", "default": 0, "help": "The base address of the pe image in memory.", "positional": true}, "type": {"type": "Choice", "default": "all", "choices": ["all", "iat", "inline", "eat"], "help": "Type of hook to display."}, "thorough": {"type": "Boolean", "default": false, "help": "By default we take some optimization. This flags forces thorough but slower checks."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "CheckProcFops", "name": "check_proc_fops", "description": "Checks the proc filesystem for hooked f_ops.\n", "args": {"all": {"type": "Boolean", "help": "Specify to see all the fops, even if they are known."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "CheckSyscall", "name": "check_syscall", "description": "Checks if the system call table has been altered.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "CheckTTY", "name": "check_ttys", "description": "Checks tty devices for hooks.\n\nSome malware insert a hook into the ops struct of the tty driver. This\nplugin enumerates all tty_struct objects and checks if their ops handlers\nhave been subverted.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "CheckTaskFops", "name": "check_task_fops", "description": "Check open files in tasks for f_ops modifications.\n", "args": {"all": {"type": "Boolean", "help": "Specify to see all the fops, even if they are known."}, "pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "method": {"type": "ChoiceArray", "default": ["InitTask"], "choices": ["InitTask"], "help": "Method to list processes (Default uses all methods)."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "CheckTrapTable", "name": "check_trap_table", "description": "Checks the traps table for hooks.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "Clipboard", "name": "clipboard", "description": "Extract the contents of the windows clipboard\n", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "CmdScan", "name": "cmdscan", "description": "Extract command history by scanning for _COMMAND_HISTORY\n", "args": {"max_history": {"type": "IntParser", "default": 50, "help": "Value of history buffer size. See HKEY_CURRENT_USER\\Console\\HistoryBufferSize for default."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Collect", "name": "collect", "description": "Collect instances of struct of type 'type_name'.\n\nThis plugin will find all other plugins that produce 'type_name' and merge\nall their output. For example, running collect 'proc' will give you a\nrudimentary psxview.\n\nThis plugin is mostly used by other plugins, like netstat and psxview.", "args": {"type_name": {"type": "String", "help": "The type (struct) to collect.", "positional": true, "required": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "ConnScan", "name": "connscan", "description": "Scan Physical memory for _TCPT_OBJECT objects (tcp connections)\n", "args": {"scan_kernel_paged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel paged pool."}, "scan_kernel_nonpaged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel non-paged pool."}, "scan_kernel_code": {"type": "Boolean", "default": false, "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_session_pools": {"type": "Boolean", "default": false, "help": "Scan session pools for all processes."}, "limit": {"type": "IntParser", "default": 18446744073709551616, "help": "The length of data to search in each selected region."}, "scan_physical": {"type": "Boolean", "default": false, "help": "Scan the physical address space only."}, "scan_kernel": {"type": "Boolean", "default": false, "help": "Scan the entire kernel address space."}, "scan_process_memory": {"type": "Boolean", "default": false, "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory", "mode_xp"]}, {"plugin": "Connections", "name": "connections", "description": "Print list of open connections [Windows XP Only]\n---------------------------------------------\n\nThis module enumerates the active connections from tcpip.sys.\n\nNote that if you are using a hibernated image this might not work\nbecause Windows closes all sockets before hibernating. You might\nfind it more effective to do conscan instead.\n\nActive TCP connections are found in a hash table. The Hash table is given by\nthe _TCBTable symbol. The size of the hash table is found in the\n_MaxHashTableSize variable.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory", "mode_xp"]}, {"plugin": "ConsoleScan", "name": "consolescan", "description": "Extract command history by scanning for _CONSOLE_INFORMATION\n", "args": {"history_buffers": {"type": "IntParser", "default": 4, "help": "Value of history buffer size. See HKEY_CURRENT_USER\\Console\\HistoryBufferSize for default."}, "max_history": {"type": "IntParser", "default": 50, "help": "Value of history buffer size. See HKEY_CURRENT_USER\\Console\\HistoryBufferSize for default."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Consoles", "name": "consoles", "description": "Enumerate command consoles.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "ControllerAddressResolver", "name": "address_resolver", "description": "\n", "args": {"symbol": {"type": "ArrayString", "default": [], "help": "List of symbols to lookup"}, "client_id": {"type": "String", "help": "The client_id. If not specified we use the context as set by the cc() plugin."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_agent", "mode_controller"]}, {"plugin": "ConvertProfile", "name": "convert_profile", "description": "Convert a profile from another program to the Rekall format.\n\nThe Rekall profile format is optimized for loading at runtime. This plugin\nproduces a Rekall profile from a variety of sources, including:\n\n- Linux debug compiled kernel module (see tool/linux/README)\n- OSX Dwarfdump outputs.", "args": {"profile_class": {"type": "String", "help": "The name of the profile implementation to specify. If not specified, we autodetect."}, "converter": {"type": "String", "help": "The name of the converter to use. If not specified autoguess."}, "source": {"type": "String", "help": "Filename of profile to read.", "positional": true, "required": true}, "out_file": {"type": "String", "help": "Path for output file.", "positional": true, "required": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "CpuInfo", "name": "cpuinfo", "description": "Prints information about each active processor.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "DLLDump", "name": "dlldump", "description": "Dump DLLs from a process address space\n", "args": {"regex": {"type": "RegEx", "default": ".", "help": "A Regular expression for selecting the dlls to dump."}, "out_fd": {"type": "String", "help": "A file like object to write the output."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "DT", "name": "dt", "description": "Print a struct or other symbol.\n\nReally just a convenience function for instantiating the object and printing\nall its members.", "args": {"target": {"type": "String", "help": "Name of a struct definition.", "positional": true, "required": true}, "offset": {"type": "IntParser", "default": 0, "help": "Name of a struct definition."}, "address_space": {"type": "AddressSpace", "help": "The address space to use."}, "member_offset": {"type": "IntParser", "help": "If specified we only show the member at this offset."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "DTBScan", "name": "dtbscan", "description": "Scans the physical memory for DTB values.\n\nThis plugin can compare the DTBs found against the list of known processes\nto find hidden processes.", "args": {"limit": {"type": "IntParser", "default": 18446744073709551616, "help": "Stop scanning after this many mb."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "DarwinAddressResolver", "name": "address_resolver", "description": "A Darwin specific address resolver plugin.\n", "args": {"symbol": {"type": "ArrayString", "default": [], "help": "List of symbols to lookup"}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinAllProcCollector", "name": "allproc", "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinArp", "name": "arp", "description": "Show information about arp tables.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinBootParameters", "name": "boot_cmdline", "description": "Prints the kernel command line.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinCheckSysCalls", "name": "check_syscalls", "description": "Checks the syscall table.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinDMSG", "name": "dmesg", "description": "Print the kernel debug messages.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinDeadFileprocCollector", "name": "dead_fileprocs", "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinDeadProcessCollector", "name": "dead_procs", "description": "Lists dead processes using the proc allocation zone.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinDumpCompressedPages", "name": "dumpcompressedmemory", "description": "Dumps all compressed pages.\n", "args": {"dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinDumpZone", "name": "dump_zone", "description": "Dumps an allocation zone's contents.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinFindDTB", "name": "find_dtb", "description": "Tries to find the DTB address for the Darwin/XNU kernel.\n\nAs the XNU kernel developed over the years, the best way of deriving this\ninformation changed. This class now offers multiple methods of finding the\nDTB. Calling find_dtb should automatically select the best method for the\njob, based on the profile. It will also attempt to fall back on less ideal\nways of getting the DTB if the best way fails.", "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinFindKASLR", "name": "find_kaslr", "description": "A scanner for KASLR slide values in the Darwin kernel.\n\nThe scanner works by looking up a known data structure and comparing\nits actual location to its expected location. Verification is a similar\nprocess, using a second constant. This takes advantage of the fact that both\ndata structures are in a region of kernel memory that maps to the physical\nmemory in a predictable way (see ID_MAP_VTOP).\n\nHuman-readable output includes values of the kernel version string (which is\nused for validation) for manual review, in case there are false positives.", "active_modes": ["mode_darwin_memory", "mode_darwin_mountain_lion_plus"]}, {"plugin": "DarwinHandles", "name": "handles", "description": "Walks open files of each proc and collects the fileproc.\n\nThis is the same algorithm as lsof, but aimed at just collecting the\nfileprocs, without doing anything with them, or sorting.", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinIPFilters", "name": "ip_filters", "description": "Check IP Filters for hooks.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinIfnetCollector", "name": "ifconfig", "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinLsmod", "name": "lsmod", "description": "Lists all kernel modules.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinLsof", "name": "lsof", "description": "Walks open files of each proc in order and prints PID, FD and the handle.\n\nEach process has an array of pointers to fileproc structs - the offset into\nthe array is the file descriptor and each fileproc struct represents a\nhandle on some resource. A type field in the fileproc determines the type\nof the resource pointed to from the fileproc (e.g. vnode, socket, pipe...).", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinMachineInfo", "name": "machine_info", "description": "Show information about this machine.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinMaps", "name": "maps", "description": "Display the process maps.\n", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinMemDump", "name": "memdump", "description": "Dumps the memory map for darwin tasks.\n", "args": {"dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinMemMap", "name": "memmap", "description": "Prints the memory map for darwin tasks.\n", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinMount", "name": "mount", "description": "Show mount points.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinNetstat", "name": "netstat", "description": "Prints all open sockets we know about, from any source.\n\nNetstat will display even connections that lsof doesn't know about, because\nthey were either recovered from an allocation zone, or found through a\nsecondary mechanism (like system call handler cache).\n\nOn the other hand, netstat doesn't know the file descriptor or, really, the\nprocess that owns the connection (although it does know the PID of the last\nprocess to access the socket.)\n\nNetstat will also tell you, in the style of psxview, if a socket was only\nfound using some of the methods available.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinNotifiers", "name": "notifiers", "description": "Detects hooks in I/O Kit IONotify objects.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinPSAUX", "name": "psaux", "description": "List processes with their commandline.\n", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinPas2Vas", "name": "pas2vas", "description": "Resolves a physical address to a virtual addrress in a process.\n", "args": {"offsets": {"type": "ArrayIntParser", "help": "A list of physical offsets to resolve."}, "pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinPgrpHashCollector", "name": "pgrphash", "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinPhysicalMap", "name": "phys_map", "description": "Prints the EFI boot physical memory map.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinPidHashProcessCollector", "name": "pidhash", "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinPsTree", "name": "pstree", "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinPslist", "name": "pslist", "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinPsxView", "name": "psxview", "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinRoute", "name": "route", "description": "Show routing table.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinSessionZoneCollector", "name": "dead_sessions", "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinSessions", "name": "sessions", "description": "Finds sessions by walking their global hashtable.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinSetProcessContext", "name": "cc", "description": "A cc plugin for windows.\n", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinSigScan", "name": "sigscan", "description": "Runs a signature scans against physical, kernel or process memory.\n", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinSocketZoneCollector", "name": "dead_sockets", "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinSocketsFromHandles", "name": "open_sockets", "description": "Looks up handles that point to a socket and collects the socket.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinSysctl", "name": "sysctl", "description": "Dumps the sysctl database.\n\nOn OSX the kernel is configured through the sysctl mechanism. This is\nanalogous to /proc or /sysfs on Linux. The configuration space is broken\ninto MIBs - or hierarchical namespace.\n\nhttps://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man8/sysctl.8.html\n\nFor example:\n\nnet.inet.ip.subnets_are_local\nnet.inet.ip.ttl\nnet.inet.ip.use_route_genid\n\nThis is implemented via a singly linked list of sysctl_oid structs. The\nstructs can be on the following types:\n\n- CTLTYPE_INT     means this MIB will handle an int.\n- CTLTYPE_STRING  means this MIB will handle a string.\n- CTLTYPE_QUAD    means this MIB will handle a long long int.\n- CTLTYPE_NODE means this is a node which handles a sublevel of MIBs. It is\n  actually a pointer to a new sysctl_oid_list which handles the sublevel.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinTTYZoneCollector", "name": "dead_ttys", "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinTaskProcessCollector", "name": "tasks", "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinTerminals", "name": "terminals", "description": "Lists open ttys.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinUnpListCollector", "name": "unp_sockets", "description": "Walks the global list of sockets in uipc_usrreq.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinVADMap", "name": "vadmap", "description": "Inspect each page in the VAD and report its status.\n\nThis allows us to see the address translation status of each page in the\nVAD.", "args": {"start": {"type": "IntParser", "default": 0, "help": "Start reading from this page."}, "end": {"type": "IntParser", "default": 9223372036854775808, "help": "Stop reading at this offset."}, "pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinVadDump", "name": "vaddump", "description": "Dump the VMA memory for a process.\n", "args": {"dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinVtoP", "name": "vtop", "description": "Describe virtual to physical translation on darwin platforms.\n", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinYaraScan", "name": "yarascan", "description": "Scan using yara signatures.\n", "args": {"hits": {"type": "IntParser", "default": 10, "help": "Quit after finding this many hits."}, "string": {"type": "String", "help": "A verbatim string to search for."}, "binary_string": {"type": "String", "help": "A binary string (encoded as hex) to search for. e.g. 000102[1-200]0506"}, "yara_file": {"type": "String", "help": "The yara signature file to read."}, "yara_expression": {"type": "String", "help": "If provided we scan for this yara expression."}, "context": {"type": "IntParser", "default": 64, "help": "Context to print after the hit."}, "pre_context": {"type": "IntParser", "default": 0, "help": "Context to print before the hit."}, "scan_physical": {"type": "Boolean", "default": false, "help": "Scan the physical address space only."}, "scan_kernel": {"type": "Boolean", "default": false, "help": "Scan the entire kernel address space."}, "scan_process_memory": {"type": "Boolean", "default": false, "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "proc": {"type": "ArrayIntParser", "help": "Kernel addresses of proc structs."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinZoneCollector", "name": "zones", "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "DarwinZoneVnodeCollector", "name": "dead_vnodes", "description": "A mixin for plugins which require a valid kernel address space.\n\nArgs:\n  dtb: A potential dtb to be used.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_darwin_memory"]}, {"plugin": "Describe", "name": "describe", "description": "Describe the output of a plugin.\n", "args": {"plugin_name": {"type": "String", "help": "A plugin or plugin name to describe.", "positional": true, "required": true}, "max_depth": {"type": "IntParser", "default": 0, "help": "The maximum depth to follow mappings.", "positional": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "DeviceTree", "name": "devicetree", "description": "Show device tree.\n", "args": {"scan_kernel_paged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel paged pool."}, "scan_kernel_nonpaged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel non-paged pool."}, "scan_kernel_code": {"type": "Boolean", "default": false, "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_session_pools": {"type": "Boolean", "default": false, "help": "Scan session pools for all processes."}, "limit": {"type": "IntParser", "default": 18446744073709551616, "help": "The length of data to search in each selected region."}, "scan_physical": {"type": "Boolean", "default": false, "help": "Scan the physical address space only."}, "scan_kernel": {"type": "Boolean", "default": false, "help": "Scan the entire kernel address space."}, "scan_process_memory": {"type": "Boolean", "default": false, "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Disassemble", "name": "dis", "description": "Disassemble the given offset.\n", "args": {"offset": {"type": "SymbolAddress", "help": "An offset to disassemble. This can also be the name of a symbol with an optional offset. For example: tcpip!TcpCovetNetBufferList.", "positional": true}, "address_space": {"type": "AddressSpace", "help": "The address space to use."}, "length": {"type": "IntParser", "help": "The number of instructions (lines) to disassemble."}, "end": {"type": "IntParser", "help": "The end address to disassemble up to."}, "mode": {"type": "Choices", "choices": ["I386", "AMD64", "MIPS"], "help": "Disassemble Mode (AMD64 or I386). Defaults to 'auto'."}, "branch": {"type": "Boolean", "default": false, "help": "If set we follow all branches to cover all code."}, "canonical": {"type": "Boolean", "default": false, "help": "If set emit canonical instructions. These can be used to develop signatures."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "DriverIrp", "name": "driverirp", "description": "Driver IRP hook detection\n", "args": {"regex": {"type": "RegEx", "help": "Analyze drivers matching REGEX"}, "scan_kernel_paged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel paged pool."}, "scan_kernel_nonpaged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel non-paged pool."}, "scan_kernel_code": {"type": "Boolean", "default": false, "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_session_pools": {"type": "Boolean", "default": false, "help": "Scan session pools for all processes."}, "limit": {"type": "IntParser", "default": 18446744073709551616, "help": "The length of data to search in each selected region."}, "scan_physical": {"type": "Boolean", "default": false, "help": "Scan the physical address space only."}, "scan_kernel": {"type": "Boolean", "default": false, "help": "Scan the entire kernel address space."}, "scan_process_memory": {"type": "Boolean", "default": false, "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "DriverScan", "name": "driverscan", "description": "Scan for driver objects _DRIVER_OBJECT\n", "args": {"scan_kernel_paged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel paged pool."}, "scan_kernel_nonpaged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel non-paged pool."}, "scan_kernel_code": {"type": "Boolean", "default": false, "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_session_pools": {"type": "Boolean", "default": false, "help": "Scan session pools for all processes."}, "limit": {"type": "IntParser", "default": 18446744073709551616, "help": "The length of data to search in each selected region."}, "scan_physical": {"type": "Boolean", "default": false, "help": "Scan the physical address space only."}, "scan_kernel": {"type": "Boolean", "default": false, "help": "Scan the entire kernel address space."}, "scan_process_memory": {"type": "Boolean", "default": false, "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Dump", "name": "dump", "description": "Hexdump an object or memory location.\n\nYou can use this plugin repeateadely to keep dumping more data using the\n \"p _\" (print last result) operation:\n\nIn [2]: dump 0x814b13b0, address_space=\"K\"\n------> dump(0x814b13b0, address_space=\"K\")\nOffset                         Hex                              Data\n---------- ------------------------------------------------ ----------------\n0x814b13b0 03 00 1b 00 00 00 00 00 b8 13 4b 81 b8 13 4b 81  ..........K...K.\n\nOut[3]: <rekall.plugins.core.Dump at 0x2967510>\n\nIn [4]: p _\n------> p(_)\nOffset                         Hex                              Data\n---------- ------------------------------------------------ ----------------\n0x814b1440 70 39 00 00 54 1b 01 00 18 0a 00 00 32 59 00 00  p9..T.......2Y..\n0x814b1450 6c 3c 01 00 81 0a 00 00 18 0a 00 00 00 b0 0f 06  l<..............\n0x814b1460 00 10 3f 05 64 77 ed 81 d4 80 21 82 00 00 00 00  ..?.dw....!.....", "args": {"offset": {"type": "SymbolAddress", "default": 0, "help": "An offset to hexdump.", "positional": true}, "address_space": {"type": "AddressSpace", "help": "The address space to use.", "positional": true}, "data": {"type": "String", "help": "Dump this string instead."}, "length": {"type": "IntParser", "help": "Maximum length to dump."}, "width": {"type": "IntParser", "help": "Number of bytes per row"}, "rows": {"type": "IntParser", "help": "Number of bytes per row"}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "DumpFiles", "name": "dumpfiles", "description": "Dump files from memory.\n\nThe interface is loosely based on the Volatility plugin of the same name,\nalthough the implementation is quite different.", "args": {"file_objects": {"type": "ArrayIntParser", "help": "Kernel addresses of _FILE_OBJECT structs."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "DwarfParser", "name": "dwarfparser", "description": "Parse the dwarf file and dump a vtype structure from it.\n", "args": {"dwarf_filename": {"type": "String", "help": "The filename of the PDB file.", "positional": true, "required": true}, "profile_class": {"type": "String", "default": "Linux64", "help": "The name of the profile implementation. "}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "EATHooks", "name": "hooks_eat", "description": "Detect EAT hooks in process and kernel memory\n", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "EWFAcquire", "name": "ewfacquire", "description": "Copy the physical address space to an EWF file.\n", "args": {"destination": {"type": "String", "help": "The destination file to create. If not specified we write output.E01 in current directory.", "positional": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "EnumerateVacbs", "name": "vacbs", "description": "Enumerate all blocks cached in the cache manager.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "EvtLogs", "name": "evtlogs", "description": "Extract Windows Event Logs (XP/2003 only)\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory", "mode_xp"]}, {"plugin": "Explain", "name": "explain", "description": "Prints various information about a query.\n\nExplains how a query was parsed and how it will be interpreted. It also\nruns a full type inferencer, to attempt to determine the output of the\nquery once it's executed.\n\nThe Explain plugin can analyse a strict superset of expressions that\nare valid in the Search plugin. It supports:\n\n - Any search query that can be passed to Search.\n - Expressions asking about types and members of profile types\n   (like structs).", "args": {"query": {"type": "String", "help": "The dotty/EFILTER query to run.", "positional": true, "required": true}, "query_parameters": {"type": "ArrayString", "help": "Positional parameters for parametrized queries."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "FLS", "name": "fls", "description": "\n", "args": {"path": {"type": "String", "default": "/", "help": "Path to print stats for.", "positional": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_ntfs"]}, {"plugin": "FStat", "name": "fstat", "description": "Print information by filename.\n", "args": {"path": {"type": "String", "default": "/", "help": "Path to print stats for.", "positional": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_ntfs"]}, {"plugin": "FetchPDB", "name": "fetch_pdb", "description": "Fetch the PDB file for an executable from the Microsoft PDB server.\n", "args": {"pdb_filename": {"type": "String", "help": "The filename of the executable to get the PDB file for.", "positional": true, "required": true}, "guid": {"type": "String", "help": "The GUID of the pdb file. If provided, the pdb filename must be provided in the --pdb_filename parameter.", "positional": true}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "FileScan", "name": "filescan", "description": "Scan Physical memory for _FILE_OBJECT pool allocations\n", "args": {"scan_kernel_paged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel paged pool."}, "scan_kernel_nonpaged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel non-paged pool."}, "scan_kernel_code": {"type": "Boolean", "default": false, "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_session_pools": {"type": "Boolean", "default": false, "help": "Scan session pools for all processes."}, "limit": {"type": "IntParser", "default": 18446744073709551616, "help": "The length of data to search in each selected region."}, "scan_physical": {"type": "Boolean", "default": false, "help": "Scan the physical address space only."}, "scan_kernel": {"type": "Boolean", "default": false, "help": "Scan the entire kernel address space."}, "scan_process_memory": {"type": "Boolean", "default": false, "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "FileYaraScanner", "name": "file_yara", "description": "Yara scanner which operates on files.\n", "args": {"paths": {"type": "Array", "help": "Paths to scan.", "positional": true}, "hits": {"type": "IntParser", "default": 10, "help": "Quit after finding this many hits."}, "string": {"type": "String", "help": "A verbatim string to search for."}, "binary_string": {"type": "String", "help": "A binary string (encoded as hex) to search for. e.g. 000102[1-200]0506"}, "yara_file": {"type": "String", "help": "The yara signature file to read."}, "yara_expression": {"type": "String", "help": "If provided we scan for this yara expression."}, "context": {"type": "IntParser", "default": 64, "help": "Context to print after the hit."}, "pre_context": {"type": "IntParser", "default": 0, "help": "Context to print before the hit."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_live"]}, {"plugin": "FindPlugins", "name": "which_plugin", "description": "Find which plugin(s) are available to produce the desired output.\n", "args": {"type_name": {"type": "String", "help": "The name of the type we're looking for. E.g.: 'proc' will find psxview, pslist, etc.", "positional": true, "required": true}, "producers_only": {"type": "Boolean", "help": "Only include producers: plugins that output only this struct and have no side effects."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "FindReferenceAlloc", "name": "show_referrer_alloc", "description": "Show allocations that refer to an address.\n", "args": {"address": {"type": "IntParser", "help": "The address to display", "positional": true, "required": true}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Gahti", "name": "gahti", "description": "Dump the USER handle type information.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "GetSIDs", "name": "tokens", "description": "Print the SIDs owning each process token.\n", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "GetServiceSids", "name": "getservicesids", "description": "Get the names of services in the Registry and return Calculated SID\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Grep", "name": "grep", "description": "Search an address space for keywords.\n", "args": {"keyword": {"type": "ArrayString", "help": "The binary strings to find.", "positional": true}, "offset": {"type": "IntParser", "default": 0, "help": "Start searching from this offset."}, "address_space": {"type": "AddressSpace", "help": "Name of the address_space to search."}, "context": {"type": "IntParser", "default": 20, "help": "Context to print around the hit."}, "limit": {"type": "String", "default": 18446744073709551616, "help": "The length of data to search."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "GuessGUID", "name": "guess_guid", "description": "Try to guess the exact version of a kernel module by using an index.\n", "args": {"module": {"type": "String", "help": "The name of the module to guess.", "positional": true}, "minimal_match": {"type": "IntParser", "default": 1, "help": "The minimal number of comparison points to be considered. Sometimes not all comparison points can be used since they may not be mapped."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Handles", "name": "handles", "description": "Print list of open handles for each process\n", "args": {"object_types": {"type": "ArrayStringParser", "help": "Types of objects to show."}, "named_only": {"type": "Boolean", "help": "Output only handles with a name ."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "HiveDump", "name": "hivedump", "description": "Prints out a hive\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Hives", "name": "hives", "description": "List all the registry hives on the system.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Hostname", "name": "hostname", "description": "A mixin for those plugins requiring a physical address space.\n\nArgs:\n  physical_address_space: The physical address space to use. If not\n    specified we use the following options:\n\n    1) session.physical_address_space,\n\n    2) Guess using the load_as() plugin,\n\n    3) Use session.kernel_address_space.base.", "args": {"verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "IATHooks", "name": "hooks_iat", "description": "Detect IAT/EAT hooks in process and kernel memory\n", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "IDump", "name": "idump", "description": "Dump a part of an MFT file.\n", "args": {"mft": {"type": "IntParser", "default": 5, "help": "MFT entry to dump.", "positional": true, "required": true}, "type": {"type": "IntParser", "default": 128, "help": "Attribute type to dump.", "positional": true}, "id": {"type": "IntParser", "help": "Id of attribute to dump.", "positional": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_ntfs"]}, {"plugin": "IExport", "name": "iexport", "description": "Extracts files from NTFS.\n\nFor each specified MFT entry, dump the file to the specified dump\ndirectory. The filename is taken as the longest filename of this MFT entry.", "args": {"dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "mft": {"type": "IntParser", "default": 5, "help": "MFT entry to dump.", "positional": true, "required": true}, "type": {"type": "IntParser", "default": 128, "help": "Attribute type to dump.", "positional": true}, "id": {"type": "IntParser", "help": "Id of attribute to dump.", "positional": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_ntfs"]}, {"plugin": "ILS", "name": "ils", "description": "List files in an NTFS image.\n", "args": {"mfts": {"type": "ArrayIntParser", "default": [5], "help": "MFT entries to list.", "positional": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_ntfs"]}, {"plugin": "IOmem", "name": "iomem", "description": "mimics /proc/iomem.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "IRDump", "name": "hexdump_file", "description": "Hexdump files from disk.\n", "args": {"start": {"type": "IntParser", "default": 0, "help": "An offset to hexdump."}, "length": {"type": "IntParser", "default": 100, "help": "Maximum length to dump."}, "width": {"type": "IntParser", "default": 24, "help": "Number of bytes per row"}, "rows": {"type": "IntParser", "default": 4, "help": "Number of bytes per row"}, "globs": {"type": "ArrayString", "help": "List of globs to return.", "positional": true}, "root": {"type": "String", "help": "Root directory to glob from."}, "case_insensitive": {"type": "Bool", "default": true, "help": "Globs will be case insensitive."}, "path_sep": {"type": "String", "help": "Path separator character (/ or \\)"}, "filesystem": {"type": "Choices", "default": "API", "choices": ["API"], "help": "The virtual filesystem implementation to glob in."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_live"]}, {"plugin": "IRFind", "name": "find", "description": "List files recursively from a root path.\n", "args": {"root": {"type": "String", "help": "The root directory to start search from.", "positional": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_live"]}, {"plugin": "IRGlob", "name": "glob", "description": "Search for files by filename glob.\n\nThis code roughly based on the Glob flow in GRR.", "args": {"globs": {"type": "ArrayString", "help": "List of globs to return.", "positional": true}, "root": {"type": "String", "help": "Root directory to glob from."}, "case_insensitive": {"type": "Bool", "default": true, "help": "Globs will be case insensitive."}, "path_sep": {"type": "String", "help": "Path separator character (/ or \\)"}, "filesystem": {"type": "Choices", "default": "API", "choices": ["API"], "help": "The virtual filesystem implementation to glob in."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_live"]}, {"plugin": "IRHash", "name": "hash", "description": "\n", "args": {"paths": {"type": "Array", "help": "Paths to hash.", "positional": true}, "hash": {"type": "ChoiceArray", "default": ["sha1"], "choices": ["md5", "sha1", "sha256"], "help": "One or more hashes to calculate."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_live"]}, {"plugin": "IRMaps", "name": "maps", "description": "Examine the process memory maps.\n", "args": {"regex": {"type": "RegEx", "help": "A regular expression to filter VAD filenames."}, "offset": {"type": "SymbolAddress", "help": "Only print the vad corresponding to this offset."}, "verbosity": {"type": "IntParser", "default": 1, "help": "With high verbosity print more information on each region."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}}, "active_modes": ["mode_live_api"]}, {"plugin": "IRStat", "name": "stat", "description": "\n", "args": {"paths": {"type": "Array", "help": "Paths to hash.", "positional": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_live"]}, {"plugin": "IStat", "name": "istat", "description": "Print information related to an MFT entry.\n", "args": {"mfts": {"type": "ArrayIntParser", "default": [5], "help": "MFT entries to list.", "positional": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_ntfs"]}, {"plugin": "Ifconfig", "name": "ifconfig", "description": "Gathers active interfaces.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "ImageCopy", "name": "imagecopy", "description": "Copies a physical address space out as a raw DD image\n", "active_modes": []}, {"plugin": "ImageInfo", "name": "imageinfo", "description": "List overview information about this image.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "ImpScan", "name": "impscan", "description": "Scan for calls to imported functions.\n", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Info", "name": "info", "description": "Print information about various subsystems.\n", "active_modes": []}, {"plugin": "InlineHooks", "name": "hooks_inline", "description": "Detect API hooks in process and kernel memory\n", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "InspectFlow", "name": "inspect_flow", "description": "\n", "args": {"flow_id": {"type": "String", "help": "The flow to examine", "positional": true, "required": true}, "verbosity": {"type": "IntParser", "default": 0, "help": "If non zero show all fields."}, "client_id": {"type": "String", "help": "The client_id. If not specified we use the context as set by the cc() plugin."}}, "active_modes": ["mode_agent", "mode_controller"]}, {"plugin": "InspectHeap", "name": "inspect_heap", "description": "Inspect the process heap.\n\nThis prints a lot of interesting facts about the process heap. It is also\nthe foundation to many other plugins which find things in the process heaps.\n\nNOTE: Currently we only support Windows 7 64 bit.", "args": {"free": {"type": "Boolean", "help": "Also show freed chunks."}, "heaps": {"type": "ArrayIntParser", "help": "Only show these heaps (default show all)"}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_amd64", "mode_windows_memory"]}, {"plugin": "InspectHunt", "name": "inspect_hunt", "description": "\n", "args": {"limit": {"type": "IntParser", "default": 20, "help": "Limit of rows to display"}, "graph_clients": {"type": "Bool", "help": "Also plot a graph of client participation."}, "flow_id": {"type": "String", "help": "The flow to examine", "positional": true, "required": true}, "verbosity": {"type": "IntParser", "default": 0, "help": "If non zero show all fields."}, "client_id": {"type": "String", "help": "The client_id. If not specified we use the context as set by the cc() plugin."}}, "active_modes": ["mode_agent", "mode_controller"]}, {"plugin": "InteractiveShell", "name": "shell", "description": "An interactive shell for Rekall.\n", "active_modes": []}, {"plugin": "JSONParser", "name": "json_render", "description": "Renders a json rendering file, as produced by the JsonRenderer.\n\nThe output of any plugin can be stored to a JSON file using:\n\nrekall -f img.dd --format json plugin_name --output test.json\n\nThen it can be rendered again using:\n\nrekall json_render test.json\n\nThis plugin implements the proper decoding of the JSON encoded output.", "args": {"file": {"type": "String", "help": "The filename to parse.", "positional": true, "required": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "KDBGScan", "name": "kdbgscan", "description": "Scan for possible _KDDEBUGGER_DATA64 structures.\n\nThe scanner is detailed here:\nhttp://moyix.blogspot.com/2008/04/finding-kernel-global-variables-in.html\n\nThe relevant structures are detailed here:\nhttp://doxygen.reactos.org/d3/ddf/include_2psdk_2wdbgexts_8h_source.html\n\nWe can see that _KDDEBUGGER_DATA64.Header is:\n\ntypedef struct _DBGKD_DEBUG_DATA_HEADER64 {\n    LIST_ENTRY64    List;\n    ULONG           OwnerTag;\n    ULONG           Size;\n}\n\nWe essentially search for an owner tag of \"KDBG\", then overlay the\n_KDDEBUGGER_DATA64 struct on it. We test for validity by reflecting\nthrough the Header.List member.", "args": {"full_scan": {"type": "Boolean", "help": "Scan the full address space."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "KPCR", "name": "kpcr", "description": "A plugin to print all KPCR blocks.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "LdrModules", "name": "ldrmodules", "description": "Detect unlinked DLLs\n", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "LinMemDump", "name": "memdump", "description": "Dump the addressable memory for a process.\n", "args": {"dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "method": {"type": "ChoiceArray", "default": ["InitTask"], "choices": ["InitTask"], "help": "Method to list processes (Default uses all methods)."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "LinMemMap", "name": "memmap", "description": "Dumps the memory map for linux tasks.\n", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "method": {"type": "ChoiceArray", "default": ["InitTask"], "choices": ["InitTask"], "help": "Method to list processes (Default uses all methods)."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "LinPSTree", "name": "pstree", "description": "Shows the parent/child relationship between processes.\n\nThis plugin prints a parent/child relationship tree by walking the\ntask_struct.children and task_struct.sibling members.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "LinPas2Vas", "name": "pas2vas", "description": "Resolves a physical address to a virtual addrress in a process.\n", "args": {"offsets": {"type": "ArrayIntParser", "help": "A list of physical offsets to resolve."}, "pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "method": {"type": "ChoiceArray", "default": ["InitTask"], "choices": ["InitTask"], "help": "Method to list processes (Default uses all methods)."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "LinVadDump", "name": "vaddump", "description": "Dump the VMA memory for a process.\n", "args": {"dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "method": {"type": "ChoiceArray", "default": ["InitTask"], "choices": ["InitTask"], "help": "Method to list processes (Default uses all methods)."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "LinVtoP", "name": "vtop", "description": "Describe virtual to physical translation on Linux platforms.\n", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "method": {"type": "ChoiceArray", "default": ["InitTask"], "choices": ["InitTask"], "help": "Method to list processes (Default uses all methods)."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "LinYaraScan", "name": "yarascan", "description": "Scan using yara signatures.\n", "args": {"hits": {"type": "IntParser", "default": 10, "help": "Quit after finding this many hits."}, "string": {"type": "String", "help": "A verbatim string to search for."}, "binary_string": {"type": "String", "help": "A binary string (encoded as hex) to search for. e.g. 000102[1-200]0506"}, "yara_file": {"type": "String", "help": "The yara signature file to read."}, "yara_expression": {"type": "String", "help": "If provided we scan for this yara expression."}, "context": {"type": "IntParser", "default": 64, "help": "Context to print after the hit."}, "pre_context": {"type": "IntParser", "default": 0, "help": "Context to print before the hit."}, "scan_physical": {"type": "Boolean", "default": false, "help": "Scan the physical address space only."}, "scan_kernel": {"type": "Boolean", "default": false, "help": "Scan the entire kernel address space."}, "scan_process_memory": {"type": "Boolean", "default": false, "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "method": {"type": "ChoiceArray", "default": ["InitTask"], "choices": ["InitTask"], "help": "Method to list processes (Default uses all methods)."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "LinuxAPIAddressResolver", "name": "address_resolver", "description": "A Linux specific address resolver plugin.\n", "args": {"symbol": {"type": "ArrayString", "default": [], "help": "List of symbols to lookup"}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_live_api"]}, {"plugin": "LinuxAddressResolver", "name": "address_resolver", "description": "A Linux specific address resolver plugin.\n", "args": {"symbol": {"type": "ArrayString", "default": [], "help": "List of symbols to lookup"}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "LinuxDmesg", "name": "dmesg", "description": "Gathers dmesg buffer.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "LinuxFindDTB", "name": "find_dtb", "description": "A scanner for DTB values. Handles both 32 and 64 bits.\n\nThe plugin also autodetects when the guest is running as a XEN\nParaVirtualized guest and returns a compatible address space.", "args": {"verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "LinuxPsList", "name": "pslist", "description": "Gathers active tasks by walking the task_struct->task list.\n\nIt does not display the swapper process. If the DTB column is blank, the\nitem is likely a kernel thread.", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "method": {"type": "ChoiceArray", "default": ["InitTask"], "choices": ["InitTask"], "help": "Method to list processes (Default uses all methods)."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "LinuxPsxView", "name": "psxview", "description": "Find hidden processes comparing various process listings.\n", "args": {"method": {"type": "ChoiceArray", "default": ["InitTask", "PidHashTable"], "choices": ["InitTask", "PidHashTable"], "help": "Method to list processes."}, "pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "LinuxSetProcessContext", "name": "cc", "description": "A cc plugin for windows.\n", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "method": {"type": "ChoiceArray", "default": ["InitTask"], "choices": ["InitTask"], "help": "Method to list processes (Default uses all methods)."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "LinuxSigScan", "name": "sigscan", "description": "Runs a signature scans against physical, kernel or process memory.\n", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "method": {"type": "ChoiceArray", "default": ["InitTask"], "choices": ["InitTask"], "help": "Method to list processes (Default uses all methods)."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "LinuxVADMap", "name": "vadmap", "description": "Inspect each page in the VAD and report its status.\n\nThis allows us to see the address translation status of each page in the\nVAD.", "args": {"start": {"type": "IntParser", "default": 0, "help": "Start reading from this page."}, "end": {"type": "IntParser", "default": 9223372036854775808, "help": "Stop reading at this offset."}, "pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "method": {"type": "ChoiceArray", "default": ["InitTask"], "choices": ["InitTask"], "help": "Method to list processes (Default uses all methods)."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "Lister", "name": "l", "description": "A plugin to list objects.\n", "active_modes": []}, {"plugin": "Live", "name": "live", "description": "Launch a Rekall shell for live analysis on the current system.\n", "args": {"mode": {"type": "Choices", "default": "Memory", "choices": ["API", "Memory"], "help": "Mode for live analysis."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "LoadAddressSpace", "name": "load_as", "description": "Load address spaces into the session if its not already loaded.\n", "active_modes": []}, {"plugin": "LoadPlugins", "name": "load_plugin", "description": "Load user provided plugins.\n\nThis probably is only useful after the interactive shell started since you\ncan already use the --plugin command line option.", "active_modes": []}, {"plugin": "LoadWindowsProfile", "name": "load_profile", "description": "Loads the profile into the session.\n\nIf the profile does not exist in the repositories, fetch and build it from\nthe symbol server. This plugin allows the user to change resolution of\nselected binaries by forcing the fetching of symbol files from the symbol\nserver interactively.", "args": {"module_name": {"type": "String", "help": "The name of the module (without the .pdb extensilon).", "positional": true, "required": true}, "guid": {"type": "String", "help": "The guid of the module."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Lookup", "name": "lookup", "description": "Lookup a global in the profile.\n\nThis plugin lets the user ask for a specific global constant in the\nactive profile.", "args": {"constant": {"type": "String", "help": "The constant to look up in the profile.", "positional": true, "required": true}, "target": {"type": "String", "help": "The type of the constant.", "positional": true}, "target_args": {"type": "String", "help": "The target args", "positional": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "Lsmod", "name": "lsmod", "description": "Gathers loaded kernel modules.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "LsmodSections", "name": "lsmod_sections", "description": "Display all the ELF sections of kernel modules.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "Lsmod_parameters", "name": "lsmod_parameters", "description": "Display parameters for all kernel modules.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "Lsof", "name": "lsof", "description": "Lists open files.\n", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "method": {"type": "ChoiceArray", "default": ["InitTask"], "choices": ["InitTask"], "help": "Method to list processes (Default uses all methods)."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "Malfind", "name": "malfind", "description": "Find hidden and injected code\n", "args": {"dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "ManageRepository", "name": "manage_repo", "description": "Manages the profile repository.\n", "args": {"executable": {"type": "String", "help": "The path to the rekall binary. This is used for spawning multiple processes."}, "processes": {"type": "IntParser", "default": 12, "help": "Number of concurrent workers."}, "path_to_repository": {"type": "String", "default": ".", "help": "The path to the profile repository"}, "force_build_index": {"type": "Boolean", "default": false, "help": "Forces building the index."}, "build_target": {"type": "StringParser", "help": "A single target to build.", "positional": true}, "builder_args": {"type": "ArrayStringParser", "help": "Optional args for the builder.", "positional": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "Mcat", "name": "mcat", "description": "Returns the contents available in memory for a given file.\n\nRanges of the file that are not present in memory are returned blank.", "args": {"dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "path": {"type": "String", "default": "/", "help": "Path to the file.", "positional": true}, "device": {"type": "String", "help": "Name of the device to match."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "MemoryTranslation", "name": "inspect_vaddr", "description": "Inspect the mapping of a virtual address.\n", "args": {"address": {"type": "SymbolAddress", "help": "Virtual address to inspect.", "positional": true, "required": true}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "Mfind", "name": "mfind", "description": "Finds a file by name in memory.\n", "args": {"path": {"type": "String", "default": "/", "help": "Path to the file.", "positional": true}, "device": {"type": "String", "help": "Name of the device to match."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "MftDump", "name": "mftdump", "description": "Enumerate MFT entries from the cache manager.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Mimikatz", "name": "mimikatz", "description": "Extract and decrypt passwords from the LSA Security Service.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Mls", "name": "mls", "description": "Lists the files in a mounted filesystem.\n", "args": {"recursive": {"type": "Boolean", "help": "Recursive listing"}, "unallocated": {"type": "Boolean", "help": "Show files that have no inode information."}, "path": {"type": "String", "default": "/", "help": "Path to the file.", "positional": true}, "device": {"type": "String", "help": "Name of the device to match."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "ModDump", "name": "moddump", "description": "Dump kernel drivers from kernel space.\n", "args": {"regex": {"type": "RegEx", "default": ".", "help": "A Regular expression for selecting the dlls to dump."}, "out_fd": {"type": "String", "help": "A file like object to write the output."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "ModScan", "name": "modscan", "description": "Scan Physical memory for _LDR_DATA_TABLE_ENTRY objects.\n", "args": {"scan_kernel_paged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel paged pool."}, "scan_kernel_nonpaged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel non-paged pool."}, "scan_kernel_code": {"type": "Boolean", "default": false, "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_session_pools": {"type": "Boolean", "default": false, "help": "Scan session pools for all processes."}, "limit": {"type": "IntParser", "default": 18446744073709551616, "help": "The length of data to search in each selected region."}, "scan_physical": {"type": "Boolean", "default": false, "help": "Scan the physical address space only."}, "scan_kernel": {"type": "Boolean", "default": false, "help": "Scan the entire kernel address space."}, "scan_process_memory": {"type": "Boolean", "default": false, "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "ModVersions", "name": "version_modules", "description": "Try to determine the versions for all kernel drivers.\n", "args": {"name_regex": {"type": "RegEx", "help": "Filter module names by this regex."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Moddump", "name": "moddump", "description": "Dumps loaded kernel modules.\n", "args": {"dump_dir": {"type": "String", "help": "Dump directory.", "required": true}, "regexp": {"type": "RegEx", "help": "Regexp on the module name."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "Modules", "name": "modules", "description": "Print list of loaded kernel modules.\n", "args": {"name_regex": {"type": "RegEx", "help": "Filter module names by this regex."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Mount", "name": "mount", "description": "Lists the mount points.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "MutantScan", "name": "mutantscan", "description": "Scan for mutant objects _KMUTANT\n", "args": {"scan_kernel_paged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel paged pool."}, "scan_kernel_nonpaged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel non-paged pool."}, "scan_kernel_code": {"type": "Boolean", "default": false, "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_session_pools": {"type": "Boolean", "default": false, "help": "Scan session pools for all processes."}, "limit": {"type": "IntParser", "default": 18446744073709551616, "help": "The length of data to search in each selected region."}, "scan_physical": {"type": "Boolean", "default": false, "help": "Scan the physical address space only."}, "scan_kernel": {"type": "Boolean", "default": false, "help": "Scan the entire kernel address space."}, "scan_process_memory": {"type": "Boolean", "default": false, "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Netstat", "name": "netstat", "description": "Print the active network connections.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "NotifierChainPlugin", "name": "notifier_chains", "description": "Outputs and verifies kernel notifier chains.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "Null", "name": "null", "description": "This plugin does absolutely nothing.\n\nIt is used to measure startup overheads.", "active_modes": []}, {"plugin": "ObjectTree", "name": "object_tree", "description": "Visualize the kernel object tree.\n\nRef:\nhttp://msdn.microsoft.com/en-us/library/windows/hardware/ff557762(v=vs.85).aspx", "args": {"type_regex": {"type": "RegEx", "default": ".", "help": "Filter the type of objects shown."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Objects", "name": "object_types", "description": "Displays all object Types on the system.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "PEAddressResolver", "name": "address_resolver", "description": "A simple address resolver for PE files.\n", "args": {"symbol": {"type": "ArrayString", "default": [], "help": "List of symbols to lookup"}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "PEDump", "name": "pedump", "description": "Dump a PE binary from memory.\n", "args": {"image_base": {"type": "SymbolAddress", "help": "The address of the image base (dos header).", "positional": true}, "out_file": {"type": "String", "help": "The file name to write."}, "address_space": {"type": "AddressSpace", "help": "The address space to use."}, "out_fd": {"type": "String", "help": "A file like object to write the output."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "PEInfo", "name": "peinfo", "description": "Print information about a PE binary.\n", "args": {"image_base": {"type": "SymbolAddress", "help": "The base of the image.", "positional": true}, "executable": {"type": "String", "help": "If provided we create an address space from this file.", "positional": true}, "address_space": {"type": "String", "help": "The address space to use."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "PFNInfo", "name": "pfn", "description": "Prints information about an address from the PFN database.\n", "args": {"pfn": {"type": "IntParser", "help": "The PFN to examine.", "positional": true, "required": true}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "PSAux", "name": "psaux", "description": "Gathers processes along with full command line and start time.\n", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "method": {"type": "ChoiceArray", "default": ["InitTask"], "choices": ["InitTask"], "help": "Method to list processes (Default uses all methods)."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "PSScan", "name": "psscan", "description": "Scan Physical memory for _EPROCESS pool allocations.\n\nStatus flags:\n  E: A known _EPROCESS address from pslist.\n  P: A known pid from pslist.", "args": {"scan_kernel_paged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel paged pool."}, "scan_kernel_nonpaged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel non-paged pool."}, "scan_kernel_code": {"type": "Boolean", "default": false, "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_session_pools": {"type": "Boolean", "default": false, "help": "Scan session pools for all processes."}, "limit": {"type": "IntParser", "default": 18446744073709551616, "help": "The length of data to search in each selected region."}, "scan_physical": {"type": "Boolean", "default": false, "help": "Scan the physical address space only."}, "scan_kernel": {"type": "Boolean", "default": false, "help": "Scan the entire kernel address space."}, "scan_process_memory": {"type": "Boolean", "default": false, "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "PSTree", "name": "pstree", "description": "Print process list as a tree\n", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "PacketQueues", "name": "pkt_queues", "description": "Dumps the current packet queues for all known open sockets.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "Pagefiles", "name": "pagefiles", "description": "Report all the active pagefiles.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "ParsePDB", "name": "parse_pdb", "description": "Parse the PDB streams.\n", "args": {"pdb_filename": {"type": "String", "help": "The filename of the PDB file.", "positional": true, "required": true}, "profile_class": {"type": "String", "help": "The name of the profile implementation. Default name is derived from the pdb filename."}, "output_filename": {"type": "String", "help": "The name of the file to store this profile. "}, "windows_version": {"type": "String", "help": "The windows version (major.minor.revision) corresponding with this PDB. For example, Windows 7 should be given as 6.1"}, "concise": {"type": "Boolean", "help": "Specify this to emit less detailed information."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "PidHashTable", "name": "pidhashtable", "description": "List processes by enumerating the pid hash tables.\n", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "method": {"type": "ChoiceArray", "default": ["InitTask"], "choices": ["InitTask"], "help": "Method to list processes (Default uses all methods)."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "PoolTracker", "name": "pool_tracker", "description": "Enumerate pool tag usage statistics.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Pools", "name": "pools", "description": "Prints information about system pools.\n\nRef:\nhttp://illmatics.com/Windows%208%20Heap%20Internals.pdf\nhttps://media.blackhat.com/bh-dc-11/Mandt/BlackHat_DC_2011_Mandt_kernelpool-wp.pdf\nhttps://immunityinc.com/infiltrate/archives/kernelpool_infiltrate2011.pdf\nhttp://gate.upm.ro/os/LABs/Windows_OS_Internals_Curriculum_Resource_Kit-ACADEMIC/WindowsResearchKernel-WRK/WRK-v1.2/base/ntos/ex/pool.c", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "PrintKey", "name": "printkey", "description": "Print a registry key, and its subkeys and values\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Printer", "name": "p", "description": "A plugin to print an object.\n", "active_modes": []}, {"plugin": "Privileges", "name": "privileges", "description": "Prints process privileges.\n", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "ProcExeDump", "name": "procdump", "description": "Dump a process to an executable file sample\n", "args": {"out_fd": {"type": "String", "help": "A file like object to write the output."}, "dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "ProcInfo", "name": "procinfo", "description": "Dump detailed information about a running process.\n", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "ProcMaps", "name": "maps", "description": "Gathers process maps for linux.\n", "args": {"pids": {"type": "ArrayIntParser", "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "task": {"type": "ArrayIntParser", "help": "Kernel addresses of task structs."}, "method": {"type": "ChoiceArray", "default": ["InitTask"], "choices": ["InitTask"], "help": "Method to list processes (Default uses all methods)."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_linux_memory"]}, {"plugin": "ProcessYaraScanner", "name": "yarascan", "description": "Yara scan process memory using the ReadProcessMemory() API.\n", "args": {"hits": {"type": "IntParser", "default": 10, "help": "Quit after finding this many hits."}, "string": {"type": "String", "help": "A verbatim string to search for."}, "binary_string": {"type": "String", "help": "A binary string (encoded as hex) to search for. e.g. 000102[1-200]0506"}, "yara_file": {"type": "String", "help": "The yara signature file to read."}, "yara_expression": {"type": "String", "help": "If provided we scan for this yara expression."}, "context": {"type": "IntParser", "default": 64, "help": "Context to print after the hit."}, "pre_context": {"type": "IntParser", "default": 0, "help": "Context to print before the hit."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_live_api"]}, {"plugin": "PtoV", "name": "ptov", "description": "Converts a physical address to a virtual address.\n", "args": {"physical_address": {"type": "IntParser", "help": "The Virtual Address to examine.", "positional": true}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "RaisingTheRoof", "name": "raise_the_roof", "description": "A plugin that exists to break your tests and make you cry.\n", "active_modes": []}, {"plugin": "Raw2Dump", "name": "raw2dmp", "description": "Convert the physical address space to a crash dump.\n\nThe Windows debugger (Windbg) works only with memory dumps stored\nin the proprietary 'crashdump' file format. This file format\ncontains the following features:\n\n1) Physical memory ranges are stored in a sparse way - there is a\n   'Runs' table which specifies the mapping between the physical\n   offset and the file offset of each page. This allows the format\n   to omit unmapped regions (unlike raw format which must pad them\n   with zero to maintain alignment).\n\n2) The crash dump header contains metadata about the\n   image. Specifically, the header contain a copy of the Kernel\n   Debugger Data Block (AKA the KDBG). This data is used to\n   bootstrap the windows debugger by providing critical initial\n   hints to the debugger.\n\nSince the KDBG block is created at system boot and never used\n(until the crash dump is written) it is trivial for malware to\noverwrite it - making it really hard for responders since windbg\nwill not be able to read the file. In later versions of windows,\nthe kdbg is also obfuscated (See the function \"nt!KdCopyDataBlock\"\nwhich decrypts it.).\n\nRekall itself does not use the KDBG block any more, although older\nmemory forensic tools still do use it. Rekall instead relies on\naccurate debugging symbols to locate critical kernel data\nstructures, reducing the level of trust we place on the image\nitself (so Rekall is more resilient to manipulation).\n\nIn order to ensure that the windows debugger is able to read the\nproduced crash dump, we recreate the kernel debugger block from\nthe symbol information we already have.\n\nNOTE: The crashdump file format can be deduced by:\n\ndis 'nt!IoFillDumpHeader'\n\nThis is the reference for this plugin.", "args": {"destination": {"type": "String", "help": "The destination path to write the crash dump.", "positional": true, "required": true}, "rebuild": {"type": "Boolean", "help": "Rebuild the KDBG data block."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "RegDump", "name": "regdump", "description": "Dump all registry hives from memory into a dump directory.\n", "args": {"dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "RekallAgent", "name": "agent", "description": "The Rekall DFIR Agent.\n", "args": {"verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_agent"]}, {"plugin": "RekallAgentController", "name": "agent_controller", "description": "Main entry point for running the agent controller.\n", "args": {"verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_agent"]}, {"plugin": "RekallAgentControllerClientContext", "name": "cc", "description": "A plugin which changes the client context.\n\nHaving a client context set avoids the need to specify it each time.", "args": {"client_id": {"type": "String", "help": "Client id to switch to.", "positional": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_agent", "mode_controller"]}, {"plugin": "RekallAgentHTTPServer", "name": "http_server", "description": "A plugin to create a front end server.\n", "args": {"verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_agent"]}, {"plugin": "RekallBovineExperience3000", "name": "moo", "description": "Renders Bessy the cow and some beer.\n\nThis is a text renderer stress-test. It uses multiple features at the\nsame time:\n\n- Multiple coloring rules per line (this was a doozy).\n- Two columns with colors next to each other.\n- Text with its own newlines isn't rewrapped.\n- It still wraps if it overflows the cell.\n- Bovine readiness and international spirit.", "active_modes": []}, {"plugin": "Run", "name": "run", "description": "A plugin which runs its argument (using eval).\n\nNote: This plugin is only defined and available when using the main entry\npoint. It is not available when Rekall is used as a library since it allows\narbitrary code execution.", "active_modes": []}, {"plugin": "Search", "name": "search", "description": "Searches and recombines output of other plugins.\n\nSearch allows you to use the EFILTER search engine to filter, transform\nand combine output of most Rekall plugins. The most common use for this\nis running IOCs.\n\nSome examples that work right now:\n==================================\n\n# Find the process with pid 1:\nsearch(\"select * pslist() where proc.pid == 1\")\n\n# Sort lsof output by file descriptor:\nsearch(\"sort(lsof(), fd)\") # or:\nsearch(\"select * from lsof() order by fd)\")\n\n# Filter and sort through lsof in one step:\nsearch(\"select * from lsof() where proc.pid == 1 order by fd)\n\n# Is there any proc with PID 1, that has a TCPv6 connection and isn't a\n# dead process?\nsearch(\"(any lsof where (proc.pid == 1 and fileproc.human_type == 'TCPv6'))\n         and not (any dead_procs where (proc.pid == 1))\")\n\n# Note: \"ANY\" is just a short hand for \"SELECT ANY FROM\" which does what\n# it sounds like, and returns True or False depending on whether the\n# query has any results.", "args": {"silent": {"type": "Boolean", "default": false, "help": "Queries should fail silently."}, "query": {"type": "String", "help": "The dotty/EFILTER query to run.", "positional": true, "required": true}, "query_parameters": {"type": "ArrayString", "help": "Positional parameters for parametrized queries."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "SearchClients", "name": "show_clients", "description": "\n", "args": {"client_id": {"type": "String", "help": "Exact match on client id", "positional": true}, "hostname": {"type": "String", "help": "Partial match on hostname"}, "limit": {"type": "IntParser", "default": 20, "help": "Number of rows to show."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_agent", "mode_controller"]}, {"plugin": "Services", "name": "services", "description": "Enumerate all services.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "SessionDelete", "name": "sdel", "description": "Delete a session.\n", "active_modes": []}, {"plugin": "SessionList", "name": "slist", "description": "List the sessions available.\n", "active_modes": []}, {"plugin": "SessionMod", "name": "smod", "description": "Modifies parameters of the current analysis session.\n\nAny session parameters can be set here. For example:\n\nsmod colors=\"no\", paging_limit=10, pager=\"less\"", "active_modes": []}, {"plugin": "SessionNew", "name": "snew", "description": "Creates a new session by cloning the current one.\n", "active_modes": []}, {"plugin": "SessionSwitch", "name": "sswitch", "description": "Changes the current session to the session with session_id.\n", "active_modes": []}, {"plugin": "Sessions", "name": "sessions", "description": "List details on _MM_SESSION_SPACE (user logon sessions).\n\nWindows uses sessions in order to separate processes. Sessions are used to\nseparate the address spaces of windows processes.\n\nNote that this plugin traverses the ProcessList member of the session object\nto list the processes - yet another list _EPROCESS objects are on.", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "SetPartitionContext", "name": "cc", "description": "A mixin for those plugins requiring a physical address space.\n\nArgs:\n  physical_address_space: The physical address space to use. If not\n    specified we use the following options:\n\n    1) session.physical_address_space,\n\n    2) Guess using the load_as() plugin,\n\n    3) Use session.kernel_address_space.base.", "args": {"partition_number": {"type": "IntParser", "help": "The partition to switch to.", "positional": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_tsk"]}, {"plugin": "ShimCacheMem", "name": "shimcachemem", "description": "Extract the Application Compatibility Shim Cache from kernel memory.\n", "args": {"verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "ShowAllocation", "name": "show_allocation", "description": "Show the allocation containing the address.\n", "args": {"address": {"type": "ArrayIntParser", "help": "The address to display", "positional": true}, "preamble": {"type": "IntParser", "default": 32, "help": "How many bytes prior to the address to display."}, "length": {"type": "IntParser", "default": 800, "help": "How many bytes after the address to display."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "SimpleYaraScan", "name": "simple_yarascan", "description": "A Simple plugin which only yarascans the physical Address Space.\n\nThis plugin should not trigger profile autodetection and therefore should be\nusable on any file at all.", "args": {"start": {"type": "IntParser", "default": 0, "help": "Start searching from this offset."}, "limit": {"type": "IntParser", "default": 18446744073709551616, "help": "The length of data to search."}, "hits": {"type": "IntParser", "default": 10, "help": "Quit after finding this many hits."}, "string": {"type": "String", "help": "A verbatim string to search for."}, "binary_string": {"type": "String", "help": "A binary string (encoded as hex) to search for. e.g. 000102[1-200]0506"}, "yara_file": {"type": "String", "help": "The yara signature file to read."}, "yara_expression": {"type": "String", "help": "If provided we scan for this yara expression."}, "context": {"type": "IntParser", "default": 64, "help": "Context to print after the hit."}, "pre_context": {"type": "IntParser", "default": 0, "help": "Context to print before the hit."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "Sockets", "name": "sockets", "description": "Print list of open sockets. [Windows xp only]\n---------------------------------------------\n\nThis module enumerates the active sockets from tcpip.sys\n\nNote that if you are using a hibernated image this might not work\nbecause Windows closes all sockets before hibernating.\n\n_ADDRESS_OBJECT are arranged in a hash table found by the _AddrObjTable\nsymbol. The hash table has a size found by the _AddrObjTableSize symbol.", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory", "mode_xp"]}, {"plugin": "SvcScan", "name": "svcscan", "description": "Scan for Windows services\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "SymLinkScan", "name": "symlinkscan", "description": "Scan for symbolic link objects\n", "args": {"scan_kernel_paged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel paged pool."}, "scan_kernel_nonpaged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel non-paged pool."}, "scan_kernel_code": {"type": "Boolean", "default": false, "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_session_pools": {"type": "Boolean", "default": false, "help": "Scan session pools for all processes."}, "limit": {"type": "IntParser", "default": 18446744073709551616, "help": "The length of data to search in each selected region."}, "scan_physical": {"type": "Boolean", "default": false, "help": "Scan the physical address space only."}, "scan_kernel": {"type": "Boolean", "default": false, "help": "Scan the entire kernel address space."}, "scan_process_memory": {"type": "Boolean", "default": false, "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "TSKFls", "name": "fls", "description": "A mixin for those plugins requiring a physical address space.\n\nArgs:\n  physical_address_space: The physical address space to use. If not\n    specified we use the following options:\n\n    1) session.physical_address_space,\n\n    2) Guess using the load_as() plugin,\n\n    3) Use session.kernel_address_space.base.", "args": {"dir_path": {"type": "String", "default": "/", "help": "Directory path to print content of", "positional": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_tsk"]}, {"plugin": "ThrdScan", "name": "thrdscan", "description": "Scan physical memory for _ETHREAD objects\n", "args": {"scan_kernel_paged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel paged pool."}, "scan_kernel_nonpaged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel non-paged pool."}, "scan_kernel_code": {"type": "Boolean", "default": false, "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_session_pools": {"type": "Boolean", "default": false, "help": "Scan session pools for all processes."}, "limit": {"type": "IntParser", "default": 18446744073709551616, "help": "The length of data to search in each selected region."}, "scan_physical": {"type": "Boolean", "default": false, "help": "Scan the physical address space only."}, "scan_kernel": {"type": "Boolean", "default": false, "help": "Scan the entire kernel address space."}, "scan_process_memory": {"type": "Boolean", "default": false, "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Threads", "name": "threads", "description": "Enumerate threads.\n", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Timers", "name": "timers", "description": "Print kernel timers and associated module DPCs.\n\nRef:\nhttp://computer.forensikblog.de/en/2011/10/timers-and-times.html", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "TskMmls", "name": "mmls", "description": "A mixin for those plugins requiring a physical address space.\n\nArgs:\n  physical_address_space: The physical address space to use. If not\n    specified we use the following options:\n\n    1) session.physical_address_space,\n\n    2) Guess using the load_as() plugin,\n\n    3) Use session.kernel_address_space.base.", "args": {"verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_tsk"]}, {"plugin": "UnloadedModules", "name": "unloaded_modules", "description": "Print a list of recently unloaded modules.\n\nRef:\nhttp://volatility-labs.blogspot.de/2013/05/movp-ii-22-unloaded-windows-kernel_22.html", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "UserAssist", "name": "userassist", "description": "Print userassist registry keys and information\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "UserHandles", "name": "userhandles", "description": "Dump the USER handle tables\n", "args": {"type": {"type": "RegEx", "default": ".", "help": "Filter handle type by this Regular Expression."}, "free": {"type": "Boolean", "help": "Also include free handles."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Users", "name": "users", "description": "Enumerate all users of this system.\n\nRef:\nsamparse.pl from RegRipper.\n\n# copyright 2012 Quantum Analytics Research, LLC\n# Author: H. Carvey, keydet89@yahoo.com", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "VAD", "name": "vad", "description": "Concise dump of the VAD.\n\nSimilar to windbg's !vad.", "args": {"regex": {"type": "RegEx", "help": "A regular expression to filter VAD filenames."}, "offset": {"type": "IntParser", "help": "Only print the vad corresponding to this offset."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "VADDump", "name": "vaddump", "description": "Dumps out the vad sections to a file\n", "args": {"dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "regex": {"type": "RegEx", "help": "A regular expression to filter VAD filenames."}, "offset": {"type": "IntParser", "help": "Only print the vad corresponding to this offset."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "VADMap", "name": "vadmap", "description": "Inspect each page in the VAD and report its status.\n\nThis allows us to see the address translation status of each page in the\nVAD.", "args": {"start": {"type": "IntParser", "default": 0, "help": "Start reading from this page."}, "end": {"type": "IntParser", "default": 9223372036854775808, "help": "Stop reading at this offset."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "VFSLs", "name": "vfs_ls", "description": "\n", "args": {"path": {"type": "String", "default": "/", "help": "The path to list.", "positional": true}, "refresh": {"type": "Bool", "help": "If set we issue a new flow request to the client and wait until it completes."}, "recursive": {"type": "Bool", "help": "Recurse into subdirs."}, "client_id": {"type": "String", "help": "The client_id. If not specified we use the context as set by the cc() plugin."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_agent", "mode_controller"]}, {"plugin": "VersionScan", "name": "version_scan", "description": "Scan the physical address space for RSDS versions.\n", "args": {"name_regex": {"type": "RegEx", "default": ".", "help": "Filter module names by this regex."}, "scan_filename": {"type": "String", "help": "Optional file to scan. If not specified we scan the physical address space.", "positional": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "VmScan", "name": "vmscan", "description": "Scan the physical memory attempting to find hypervisors.\n\nOnce EPT values are found, you can use them to inspect virtual machines\nwith any of the rekall modules by using the --ept parameter and\nspecifying the guest virtual machine profile.\n\nSupports the detection of the following virtualization techonlogies:\n  * Intel VT-X with EPT. Microarchitectures:\n    + Westmere\n    + Nehalem\n    + Sandybridge\n    + Ivy Bridge\n    + Haswell\n\n  * Intel VT-X without EPT (unsupported page translation in rekall).\n    + Penryn\n\nFor the specific processor models that support EPT, please check:\nhttp://ark.intel.com/products/virtualizationtechnology.", "args": {"quick": {"type": "Boolean", "help": "Perform quick VM detection."}, "no_nested": {"type": "Boolean", "help": "Don't do nested VM detection."}, "offset": {"type": "IntParser", "default": 0, "help": "Offset in the physical image to start the scan."}, "show_all": {"type": "Boolean", "default": false, "help": "Also show VMs that failed validation."}, "image_is_guest": {"type": "Boolean", "default": false, "help": "The image is for a guest VM, not the host."}, "no_validation": {"type": "Boolean", "default": false, "help": "[DEBUG SETTING] Disable validation of VMs."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": []}, {"plugin": "VtoP", "name": "vtop", "description": "Prints information about the virtual to physical translation.\n", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "Win32kAutodetect", "name": "win32k_autodetect", "description": "Automatically detect win32k struct layout.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WinDNSCache", "name": "dns_cache", "description": "Dump the windows DNS resolver cache.\n", "args": {"hashtable": {"type": "String", "help": "Optionally provide the hashtable"}, "no_index": {"type": "Boolean", "help": "Should we not use the index"}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_amd64", "mode_vista_plus", "mode_windows_memory"]}, {"plugin": "WinDesktops", "name": "desktops", "description": "Print information on each desktop.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WinDllList", "name": "dlllist", "description": "Prints a list of dll modules mapped into each process.\n", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WinEventHooks", "name": "eventhooks", "description": "Print details on windows event hooks\n", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WinFindDTB", "name": "find_dtb", "description": "A plugin to search for the Directory Table Base for windows systems.\n\nThere are a number of ways to find the DTB:\n\n- Scanner method: Scans the image for a known kernel process, and read the\n  DTB from its Process Environment Block (PEB).\n\n- Get the DTB from the KPCR structure.\n\n- Note that the kernel is mapped into every process's address space (with\n  the exception of session space which might be different) so using any\n  process's DTB from the same session will work to read kernel data\n  structures. If this plugin fails, try psscan to find potential DTBs.", "args": {"verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WinMemDump", "name": "memdump", "description": "Dump windows processes.\n", "args": {"dump_dir": {"type": "String", "help": "Path suitable for dumping files."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WinMemMap", "name": "memmap", "description": "Calculates the memory regions mapped by a process.\n", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WinMessageHooks", "name": "messagehooks", "description": "List desktop and thread window message hooks.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WinNetscan", "name": "netscan", "description": "Scan a Vista, 2008 or Windows 7 image for connections and sockets\n", "args": {"scan_kernel_paged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel paged pool."}, "scan_kernel_nonpaged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel non-paged pool."}, "scan_kernel_code": {"type": "Boolean", "default": false, "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_session_pools": {"type": "Boolean", "default": false, "help": "Scan session pools for all processes."}, "limit": {"type": "IntParser", "default": 18446744073709551616, "help": "The length of data to search in each selected region."}, "scan_physical": {"type": "Boolean", "default": false, "help": "Scan the physical address space only."}, "scan_kernel": {"type": "Boolean", "default": false, "help": "Scan the entire kernel address space."}, "scan_process_memory": {"type": "Boolean", "default": false, "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WinNetstat", "name": "netstat", "description": "Enumerate image for connections and sockets\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WinPas2Vas", "name": "pas2vas", "description": "Resolves a physical address to a virtual addrress in a process.\n", "args": {"offsets": {"type": "ArrayIntParser", "help": "A list of physical offsets to resolve."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WinPhysicalMap", "name": "phys_map", "description": "Prints the boot physical memory map.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WinPhysicalYaraScanner", "name": "yarascan_physical", "description": "An experimental yara scanner over the physical address space.\n\nYara does not provide a streaming interface, which means that when we scan\nfor yara rules we can only ever match strings within the same buffer. This\nis a problem for physical address space scanning because each page (although\nit might appear to be contiguous) usually comes from a different\nprocess/mapped file.\n\nTherefore we need a more intelligent way to apply yara signatures on the\nphysical address space:\n\n1. The original set of yara rules is converted into a single rule with all\nthe strings from all the rules in it. The rule has a condition \"any of them\"\nwhich will match any string appearing in the scanned buffer.\n\n2. This rule is then applied over the physical address space.\n\n3. For each hit we derive a context and add the hit to the context.\n\n4. Finally we test all the rules within the same context with the original\nrule set.", "args": {"hits": {"type": "IntParser", "default": 10, "help": "Quit after finding this many hits."}, "yara_expression": {"type": "String", "help": "If provided we scan for this yara expression specified in the yara DSL."}, "yara_ast": {"type": "String", "help": "If provided we scan for this yara expression specified in the yara JSON AST."}, "start": {"type": "IntParser", "default": 0, "help": "Start searching from this offset."}, "limit": {"type": "IntParser", "default": 18446744073709551616, "help": "The length of data to search."}, "context": {"type": "IntParser", "default": 64, "help": "Context to print after the hit."}, "pre_context": {"type": "IntParser", "default": 0, "help": "Context to print before the hit."}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WinPsList", "name": "pslist", "description": "List processes for windows.\n", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WinRammap", "name": "rammap", "description": "Scan all physical memory and report page owners.\n", "args": {"start": {"type": "IntParser", "default": 0, "help": "Physical memory address to start displaying.", "positional": true}, "end": {"type": "IntParser", "help": "Physical memory address to end displaying."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WinSSDT", "name": "ssdt", "description": "Enumerate the SSDT.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WinSigScan", "name": "sigscan", "description": "Runs a signature scans against physical, kernel or process memory.\n", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WinVirtualMap", "name": "virt_map", "description": "Prints the Windows Kernel Virtual Address Map.\n\nOn 32 bit windows, the kernel virtual address space can be managed\ndynamically. This plugin shows each region and what it is used for.\n\nNote that on 64 bit windows the address space is large enough to not worry\nabout it. In that case, the offsets and regions are hard coded.\n\nhttp://www.woodmann.com/forum/entry.php?219-Using-nt!_MiSystemVaType-to-navigate-dynamic-kernel-address-space-in-Windows7", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WinYaraScan", "name": "yarascan", "description": "Scan using yara signatures.\n", "args": {"hits": {"type": "IntParser", "default": 10, "help": "Quit after finding this many hits."}, "string": {"type": "String", "help": "A verbatim string to search for."}, "binary_string": {"type": "String", "help": "A binary string (encoded as hex) to search for. e.g. 000102[1-200]0506"}, "yara_file": {"type": "String", "help": "The yara signature file to read."}, "yara_expression": {"type": "String", "help": "If provided we scan for this yara expression."}, "context": {"type": "IntParser", "default": 64, "help": "Context to print after the hit."}, "pre_context": {"type": "IntParser", "default": 0, "help": "Context to print before the hit."}, "scan_kernel_paged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel paged pool."}, "scan_kernel_nonpaged_pool": {"type": "Boolean", "default": false, "help": "Scan the kernel non-paged pool."}, "scan_kernel_code": {"type": "Boolean", "default": false, "help": "Scan the kernel image and loaded drivers."}, "scan_kernel_session_pools": {"type": "Boolean", "default": false, "help": "Scan session pools for all processes."}, "limit": {"type": "IntParser", "default": 18446744073709551616, "help": "The length of data to search in each selected region."}, "scan_physical": {"type": "Boolean", "default": false, "help": "Scan the physical address space only."}, "scan_kernel": {"type": "Boolean", "default": false, "help": "Scan the entire kernel address space."}, "scan_process_memory": {"type": "Boolean", "default": false, "help": "Scan all of process memory. Uses process selectors to narrow down selections."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WindowsAddressResolver", "name": "address_resolver", "description": "A windows specific address resolver plugin.\n", "args": {"symbol": {"type": "ArrayString", "default": [], "help": "List of symbols to lookup"}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WindowsPsxView", "name": "psxview", "description": "Find hidden processes with various process listings\n", "args": {"method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles", "PSScan", "Thrdproc"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles", "PSScan", "Thrdproc"], "help": "Method to list processes."}, "eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WindowsSetProcessContext", "name": "cc", "description": "A cc plugin for windows.\n", "args": {"eprocess": {"type": "ArrayIntParser", "default": [], "help": "Kernel addresses of eprocess structs."}, "pids": {"type": "ArrayIntParser", "default": [], "help": "One or more pids of processes to select.", "positional": true}, "proc_regex": {"type": "RegEx", "help": "A regex to select a process by name."}, "method": {"type": "ChoiceArray", "default": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "choices": ["PsActiveProcessHead", "CSRSS", "PspCidTable", "Sessions", "Handles"], "help": "Method to list processes."}, "dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WindowsStations", "name": "windows_stations", "description": "Displays all the windows stations by following lists.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}, {"plugin": "WindowsTimes", "name": "times", "description": "Return current time, as known to the kernel.\n", "args": {"dtb": {"type": "IntParser", "help": "The DTB physical address.", "hidden": true}, "verbosity": {"type": "IntParser", "default": 1, "help": "An integer reflecting the amount of desired output: 0 = quiet, 10 = noisy."}}, "active_modes": ["mode_windows_memory"]}]